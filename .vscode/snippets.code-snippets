{
	"Binary Search": {
		"prefix": "cp_binary_search",
		"description": "",
		"scope": "cpp",
		"body": [
			"template<class T> T binary_search(vector<T> &arr, T val) {",
			"    int n = arr.size();",
			"    int l = 0, r = n - 1;",
			"    while (l < r) {",
			"        int mid = l + (r - l) / 2;",
			"        if (arr[mid] >= val) r = mid;",
			"        else l = mid + 1;",
			"    }",
			"    return (arr[l] == val) ? l : -1;",
			"}"
		]
	},
	"Kruskal's Algorithm": {
		"prefix": "cp_kruskal",
		"description": "",
		"scope": "cpp",
		"body": [
			"template <class T> vector<tuple<T, int, int>> kruskal(int n, vector<tuple<T, int, int>> edg) {",
			"    union_find dsu;",
			"    dsu.init(n, true);",
			"    sort(edg.begin(), edg.end());",
			"    vector<tuple<T, int, int>> tree;",
			"    for (tuple<T, int, int> &e : edg) {",
			"        T w;",
			"        int u, v;",
			"        tie(w, u, v) = e;",
			"        if (dsu.merge(u, v)) tree.emplace_back(w, u, v);",
			"        if (dsu.cnt == 1) return tree;",
			"    }",
			"    return vector<tuple<T, int, int>>();",
			"}"
		]
	},
	"Union-Find": {
		"prefix": "cp_union_find",
		"description": "",
		"scope": "cpp",
		"body": [
			"struct union_find {\r",
			"\r",
			"    // Array of parents (and tree sizes)\r",
			"    vector<int> p;\r",
			"\r",
			"    // Number of trees in the forest\r",
			"    int cnt;\r",
			"\r",
			"    // true if we want to use path compression, and false if not\r",
			"    bool pc;\r",
			"    \r",
			"    void init(int n, bool path_compression = false) {\r",
			"        p = vector<int>(n, -1);\r",
			"        cnt = n, pc = path_compression;\r",
			"    }\r",
			"    \r",
			"    //Gets the size of the tree vertex v is in (Time Complexity: O(log(N)) w/o path compression, O(alpha(N)) w/ path compression)\r",
			"    int size(int v) { return -p[find(v)]; }\r",
			"    \r",
			"    //Finds the root of the tree vertex v is in (Time Complexity: O(log(N)) w/o path compression, O(alpha(N)) w/ path compression)\r",
			"    int find(int v) {\r",
			"        if (p[v] < 0) return v;\r",
			"        int rt = find(p[v]);\r",
			"        if (pc) p[v] = rt;\r",
			"        return rt;\r",
			"    }\r",
			"\r",
			"    //Merges the tress that u and v are in (Time Complexity: O(log(N)) w/o path compression, O(alpha(N)) w/ path compression)\r",
			"    bool merge(int u, int v) {\r",
			"        u = find(u), v = find(v);\r",
			"        if (u == v) return false;\r",
			"        if (size(u) < size(v)) swap(u, v);\r",
			"        p[u] += p[v], p[v] = u, cnt--;\r",
			"        return true;\r",
			"    }\r",
			"    \r",
			"};"
		]
	},
	"Fenwick Tree": {
		"prefix": "cp_fenwick_tree",
		"description": "",
		"scope": "cpp",
		"body": [
			"template <class T> struct fenwick_tree {",
			"",
			"    // Stores the actual binary-indexed tree",
			"    vector<T> bit;",
			"",
			"    // Constructs a binary-indexed tree of all 0s (Time Complexity: O(N))",
			"    void init(int n) { bit = vector<T>(n, 0); }",
			"",
			"    // Constructs a binary-indexed tree based on an array (Time Complexity: O(N))",
			"    void init (const vector<T> &arr) {",
			"        int n = arr.size();",
			"        bit = vector<T>(n, 0);",
			"        for (int i = 0; i < n; i++) {",
			"            bit[i] += arr[i];",
			"            int ni = i | (i + 1);",
			"            if (ni < n) bit[ni] += bit[i];",
			"        }",
			"    }",
			"",
			"    // Updates the element in the index pos (Time Complexity: O(log(N)))",
			"    void update(int idx, T add) {",
			"        for (int i = idx; i < (int)bit.size(); i |= i + 1)",
			"            bit[i] += add;",
			"    }",
			"",
			"    // Gives us the sum of all elements in the range [0, pos] (Time Complexity: O(log(N)))",
			"    T query(int idx) {",
			"        T sum = 0;",
			"        for (int i = idx; i >= 0; i = (i & (i + 1)) - 1)",
			"            sum += bit[i];",
			"        return sum;",
			"    }",
			"",
			"};"
		]
	},
	"Template": {
        "prefix": "cp_template",
        "body": [
            "#pragma GCC optimize(\"unroll-loops, O3\")\r",
            "#include <bits/stdc++.h>\r",
            "#include <ext/pb_ds/tree_policy.hpp>\r",
            "#include <ext/pb_ds/assoc_container.hpp>\r",
            "using namespace std;\r",
            "using namespace __gnu_pbds;\r",
            "using ll = long long;\r",
            "using ld = long double;\r",
            "template <class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r",
            "const int xx[8] = { -1, 0, 1, 0, -1, -1, 1, 1 };\r",
            "const int yy[8] = { 0, -1, 0, 1, -1, 1, -1, 1 };\r",
            "const ld pi = atan(1) * 4;\r",
            "\r",
            "int main() {\r",
            "    ios_base::sync_with_stdio(false);\r",
            "    cin.tie(NULL), srand(time(NULL));\r",
            "    \r",
            "    return 0;\r",
            "}"
        ],
		"description": "",
		"scope": "cpp"
    },
    "Multiple Testcases Template": {
        "prefix": "cp_multiple_testcases_template",
        "body": [
            "#pragma GCC optimize(\"unroll-loops, O3\")\r",
            "#include <bits/stdc++.h>\r",
            "#include <ext/pb_ds/tree_policy.hpp>\r",
            "#include <ext/pb_ds/assoc_container.hpp>\r",
            "using namespace std;\r",
            "using namespace __gnu_pbds;\r",
            "using ll = long long;\r",
            "using ld = long double;\r",
            "template <class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r",
            "const int xx[8] = { -1, 0, 1, 0, -1, -1, 1, 1 };\r",
            "const int yy[8] = { 0, -1, 0, 1, -1, 1, -1, 1 };\r",
            "const ld pi = atan(1) * 4;\r",
            "\r",
            "void solve() {\r",
            "\r",
            "}\r",
            "\r",
            "int main() {\r",
            "    ios_base::sync_with_stdio(false);\r",
            "    cin.tie(NULL), srand(time(NULL));\r",
            "    int t;\r",
            "    cin >> t;\r",
            "    while (t--) solve();\r",
            "    return 0;\r",
            "}"
        ],
		"description": "",
		"scope": "cpp"
    },
	"Google Code Jam Template": {
        "prefix": "cp_google_code_jam_template",
        "body": [
            "#pragma GCC optimize(\"unroll-loops, O3\")\r",
            "#include <bits/stdc++.h>\r",
            "#include <ext/pb_ds/tree_policy.hpp>\r",
            "#include <ext/pb_ds/assoc_container.hpp>\r",
            "using namespace std;\r",
            "using namespace __gnu_pbds;\r",
            "using ll = long long;\r",
            "using ld = long double;\r",
            "template <class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r",
            "const int xx[8] = { -1, 0, 1, 0, -1, -1, 1, 1 };\r",
            "const int yy[8] = { 0, -1, 0, 1, -1, 1, -1, 1 };\r",
            "const ld pi = atan(1) * 4;\r",
            "\r",
            "void solve() {\r",
            "\r",
            "}\r",
            "\r",
            "int main() {\r",
            "    ios_base::sync_with_stdio(false);\r",
            "    cin.tie(NULL), srand(time(NULL));\r",
            "    int t;\r",
            "    cin >> t;\r",
            "    for (int i = 1; i <= t; i++) {\r",
            "        cout << \"Case #\" << i << \": \";\r",
            "        solve();\r",
            "    }\r",
            "    return 0;\r",
            "}"
        ],
		"description": "",
		"scope": "cpp"
    },
    "Constructive Tester Template": {
        "prefix": "cp_constructive_template_tester",
        "body": [
            "#pragma GCC optimize(\"unroll-loops, O3\")\r",
            "#include <bits/stdc++.h>\r",
            "#include <ext/pb_ds/tree_policy.hpp>\r",
            "#include <ext/pb_ds/assoc_container.hpp>\r",
            "using namespace std;\r",
            "using namespace __gnu_pbds;\r",
            "using ll = long long;\r",
            "using ld = long double;\r",
            "template <class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r",
            "const int xx[8] = { -1, 0, 1, 0, -1, -1, 1, 1 };\r",
            "const int yy[8] = { 0, -1, 0, 1, -1, 1, -1, 1 };\r",
            "const ld pi = atan(1) * 4;\r",
            "string file_name = \"code\";\r",
            "\r",
            "int main() {\r",
            "    ios_base::sync_with_stdio(false);\r",
            "    cin.tie(NULL), srand(time(NULL));\r",
            "    ifstream in(\"input.txt\");\r",
            "    ifstream out(file_name + \"_output.txt\");\r",
            "    \r",
            "    return 0;\r",
            "}"
        ],
        "description": ""
    }
}